{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["calculatePace","goalHours","goalMinutes","goalSeconds","distance","isNaN","paceInSeconds","hoursInSeconds","hours","parseInt","minutesInSeconds","minutes","convertMinutesToSeconds","calculatePaceInSeconds","toString","padStart","PaceCalculator","props","handleDistanceChange","bind","handleGoalHoursChange","handleGoalMinutesChange","handleGoalSecondsChange","state","this","setState","pace","onGoalHoursChange","onGoalMinutesChange","onGoalSecondsChange","distanceInKm","onDistanceChanged","React","Component","Distance","handleChange","e","target","value","htmlFor","id","onChange","GoalTime","handleHoursChange","handleMinutesChange","handleSecondsChange","type","placeholder","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6e111137.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <main>\n      <div className=\"container\">\n        <h1>Pace Calculator</h1>\n        <PaceCalculator></PaceCalculator>\n      </div>\n    </main>);\n}\n\nfunction calculatePace(goalHours, goalMinutes, goalSeconds, distance) {\n  if (isNaN(goalHours) || goalHours === \"\" ||\n    isNaN(goalMinutes) || goalMinutes === \"\" ||\n    isNaN(goalSeconds) || goalSeconds === \"\" ||\n    isNaN(distance) || distance === \"\") {\n    return '';\n  }\n  const paceInSeconds = calculatePaceInSeconds(goalHours, goalMinutes, goalSeconds, distance);\n  const minutes = parseInt(paceInSeconds / 60);\n  const seconds = parseInt(paceInSeconds % 60);\n  var pace = minutes + \":\" + seconds.toString().padStart(2, \"0\");\n  return \"Pace = \" + pace + \" /km \";\n}\n\nfunction calculatePaceInSeconds(goalHours, goalMinutes, goalSeconds, distance) {\n  const hoursInSeconds = convertHoursToSeconds(goalHours);\n  const minutesInSeconds = convertMinutesToSeconds(goalMinutes);\n  const goalTime = hoursInSeconds + minutesInSeconds + parseInt(goalSeconds);\n  const paceInSeconds = goalTime / distance;\n  return paceInSeconds;\n}\n\nfunction convertHoursToSeconds(hours) {\n  return (parseInt(hours) * 60 * 60);\n}\n\nfunction convertMinutesToSeconds(minutes) {\n  return parseInt(minutes) * 60;\n}\n\nclass PaceCalculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleDistanceChange = this.handleDistanceChange.bind(this);\n    this.handleGoalHoursChange = this.handleGoalHoursChange.bind(this);\n    this.handleGoalMinutesChange = this.handleGoalMinutesChange.bind(this);\n    this.handleGoalSecondsChange = this.handleGoalSecondsChange.bind(this);\n    this.state = { distance: '', goalHours: '', goalMinutes: '', goalSeconds: '' };\n  }\n\n  handleDistanceChange(distance) {\n    this.setState({ distance });\n  }\n\n  handleGoalHoursChange(goalHours) {\n    this.setState({ goalHours });\n  }\n\n  handleGoalMinutesChange(goalMinutes) {\n    this.setState({ goalMinutes });\n  }\n\n  handleGoalSecondsChange(goalSeconds) {\n    this.setState({ goalSeconds });\n  }\n\n  render() {\n    const distance = this.state.distance;\n    const goalHours = this.state.goalHours;\n    const goalMinutes = this.state.goalMinutes;\n    const goalSeconds = this.state.goalSeconds;\n    const pace = calculatePace(goalHours, goalMinutes, goalSeconds, distance);\n    return (\n      <>\n        <GoalTime\n          goalHours={goalHours} onGoalHoursChange={this.handleGoalHoursChange}\n          goalMinutes={goalMinutes} onGoalMinutesChange={this.handleGoalMinutesChange}\n          goalSeconds={goalSeconds} onGoalSecondsChange={this.handleGoalSecondsChange}></GoalTime>\n        <Distance distanceInKm={distance} onDistanceChanged={this.handleDistanceChange}></Distance>\n        <h4>\n          {pace}\n        </h4>\n      </>\n    );\n  }\n}\n\nclass Distance extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onDistanceChanged(e.target.value);\n  }\n\n  render() {\n    return (\n      <fieldset>\n        <label htmlFor=\"distance\">Distance</label>\n        <select id=\"distance\" value={this.props.distanceInKm} onChange={this.handleChange}>\n          <option value=\"\"></option>\n          <option value=\"5.0\">5 km</option>\n          <option value=\"10.0\">10 km</option>\n          <option value=\"21.0975\">Half marathon</option>\n          <option value=\"42.195\">Marathon</option>\n        </select>\n      </fieldset>\n    );\n  }\n}\n\nclass GoalTime extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleHoursChange = this.handleHoursChange.bind(this);\n    this.handleMinutesChange = this.handleMinutesChange.bind(this);\n    this.handleSecondsChange = this.handleSecondsChange.bind(this);\n  }\n\n  handleHoursChange(e) {\n    this.props.onGoalHoursChange(e.target.value);\n  }\n\n  handleMinutesChange(e) {\n    this.props.onGoalMinutesChange(e.target.value);\n  }\n\n  handleSecondsChange(e) {\n    this.props.onGoalSecondsChange(e.target.value);\n  }\n\n  render() {\n    return (\n      <fieldset>\n        <label>Goal Time</label>\n        <input type=\"number\" placeholder=\"hours\" value={this.props.goalHours} onChange={this.handleHoursChange} className=\"Timespan\" />&nbsp;:&nbsp;\n        <input type=\"number\" placeholder=\"minutes\" value={this.props.goalMinutes} onChange={this.handleMinutesChange} className=\"Timespan\" />&nbsp;:&nbsp;\n        <input type=\"number\" placeholder=\"seconds\" value={this.props.goalSeconds} onChange={this.handleSecondsChange} className=\"Timespan\" />\n      </fieldset>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}