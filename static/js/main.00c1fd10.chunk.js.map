{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["PaceCalculatorModel","goalHours","goalMinutes","goalSeconds","distance","calculatePace","model","paceInSeconds","hoursInSeconds","hours","minutesInSeconds","minutes","convertMinutesToSeconds","calculatePaceInSeconds","Math","floor","toString","padStart","PaceCalculator","props","handleDistanceChange","bind","handleGoalHoursChange","handleGoalMinutesChange","handleGoalSecondsChange","state","this","setState","parseInt","seconds","Number","isNaN","validate","pace","undefined","onGoalHoursChange","onGoalMinutesChange","onGoalSecondsChange","distanceInKm","onDistanceChanged","React","Component","Distance","handleChange","e","target","value","htmlFor","id","onChange","GoalTime","handleHoursChange","handleMinutesChange","handleSecondsChange","type","placeholder","className","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.00c1fd10.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\ninterface PaceCalculatorProps {\n}\n\ninterface DistanceProps {\n  distanceInKm: string;\n  onDistanceChanged: (event: string) => void;\n}\n\ninterface GoalTimeProps {\n  goalHours: string;\n  goalMinutes: string;\n  goalSeconds: string;\n  onGoalHoursChange: (event: string) => void;\n  onGoalMinutesChange: (event: string) => void;\n  onGoalSecondsChange: (event: string) => void;\n}\n\nclass PaceCalculatorModel\n{\n  constructor(public goalHours: number, public goalMinutes: number, public goalSeconds: number, public distance: number)\n  {\n  }\n}\n\nfunction App() {\n  return (\n    <main>\n      <div className=\"container\">\n        <h1>Pace Calculator</h1>\n        <PaceCalculator></PaceCalculator>\n      </div>\n    </main>);\n}\nfunction calculatePace(model: PaceCalculatorModel) :string {\n  const paceInSeconds = calculatePaceInSeconds(model);\n  const minutes = Math.floor(paceInSeconds / 60);\n  const seconds = Math.floor(paceInSeconds % 60);\n  var pace = minutes + \":\" + seconds.toString().padStart(2, \"0\");\n  return \"Pace = \" + pace + \" /km \";\n}\n\nfunction validate(state: PaceCalculatorState) :PaceCalculatorModel | undefined {\n  if(state.goalHours === \"\" ||  \n     state.goalMinutes === \"\" ||  \n     state.goalSeconds === \"\"  || \n     state.distance === \"\" )\n  {\n    return undefined;\n  }\n  const hours = parseInt(state.goalHours);\n  const minutes = parseInt(state.goalMinutes);\n  const seconds = parseInt(state.goalSeconds);\n  const distance = Number(state.distance);\n  if(!isNaN(hours) && !isNaN(minutes) && !isNaN(seconds) && !isNaN(distance))\n  {\n    return new PaceCalculatorModel(hours, minutes, seconds, distance);\n  }\n  else\n  {\n    return undefined;\n  }  \n}\n\nfunction calculatePaceInSeconds(model: PaceCalculatorModel) {\n  const hoursInSeconds = convertHoursToSeconds(model!.goalHours);\n  const minutesInSeconds = convertMinutesToSeconds(model!.goalMinutes);\n  const goalTime = hoursInSeconds + minutesInSeconds + model!.goalSeconds;\n  const paceInSeconds = goalTime / model!.distance;\n  return paceInSeconds;\n}\n\nfunction convertHoursToSeconds(hours: number):number {\n  return (hours * 60 * 60);\n}\n\nfunction convertMinutesToSeconds(minutes: number) {\n  return minutes * 60;\n}\n\ninterface PaceCalculatorState {\n  distance: string;\n  goalHours: string;\n  goalMinutes: string;\n  goalSeconds: string;\n}\n\nclass PaceCalculator extends React.Component<PaceCalculatorProps, PaceCalculatorState> {\n  constructor(props: PaceCalculatorProps) {\n    super(props);\n    this.handleDistanceChange = this.handleDistanceChange.bind(this);\n    this.handleGoalHoursChange = this.handleGoalHoursChange.bind(this);\n    this.handleGoalMinutesChange = this.handleGoalMinutesChange.bind(this);\n    this.handleGoalSecondsChange = this.handleGoalSecondsChange.bind(this);\n    this.state = { distance: '', goalHours: '', goalMinutes: '', goalSeconds: '' };\n  }\n\n  handleDistanceChange(distance: string) {\n    this.setState({ distance });\n  }\n\n  handleGoalHoursChange(goalHours: string) {\n    this.setState({ goalHours });\n  }\n\n  handleGoalMinutesChange(goalMinutes: string) {\n    this.setState({ goalMinutes });\n  }\n\n  handleGoalSecondsChange(goalSeconds: string) {\n    this.setState({ goalSeconds });\n  }\n\n  render() {\n    const distance = this.state.distance;\n    const goalHours = this.state.goalHours;\n    const goalMinutes = this.state.goalMinutes;\n    const goalSeconds = this.state.goalSeconds;\n    const model = validate(this.state);\n    const pace = model !== undefined ? calculatePace(model) : \"\";\n    return (\n      <>\n        <GoalTime\n          goalHours={goalHours} onGoalHoursChange={this.handleGoalHoursChange}\n          goalMinutes={goalMinutes} onGoalMinutesChange={this.handleGoalMinutesChange}\n          goalSeconds={goalSeconds} onGoalSecondsChange={this.handleGoalSecondsChange}></GoalTime>\n        <Distance distanceInKm={distance} onDistanceChanged={this.handleDistanceChange}></Distance>\n        <h4>\n          {pace}\n        </h4>\n      </>\n    );\n  }\n}\n\nclass Distance extends React.Component<DistanceProps> {\n  constructor(props: DistanceProps) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  handleChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    this.props.onDistanceChanged(e.target.value);\n  }\n\n  render() {\n    return (\n      <fieldset>\n        <label htmlFor=\"distance\">Distance</label>\n        <select id=\"distance\" value={this.props.distanceInKm} onChange={this.handleChange}>\n          <option value=\"\"></option>\n          <option value=\"5.0\">5 km</option>\n          <option value=\"10.0\">10 km</option>\n          <option value=\"21.0975\">Half marathon</option>\n          <option value=\"42.195\">Marathon</option>\n        </select>\n      </fieldset>\n    );\n  }\n}\n\nclass GoalTime extends React.Component<GoalTimeProps> {\n  constructor(props: GoalTimeProps) {\n    super(props);\n    this.handleHoursChange = this.handleHoursChange.bind(this);\n    this.handleMinutesChange = this.handleMinutesChange.bind(this);\n    this.handleSecondsChange = this.handleSecondsChange.bind(this);\n  }\n\n  handleHoursChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.props.onGoalHoursChange(e.target.value);\n  }\n\n  handleMinutesChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.props.onGoalMinutesChange(e.target.value);\n  }\n\n  handleSecondsChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.props.onGoalSecondsChange(e.target.value);\n  }\n\n  render() {\n    return (\n      <fieldset>\n        <label>Goal Time</label>\n        <input type=\"number\" placeholder=\"hours\" value={this.props.goalHours} onChange={this.handleHoursChange} className=\"Timespan\" />&nbsp;:&nbsp;\n        <input type=\"number\" placeholder=\"minutes\" value={this.props.goalMinutes} onChange={this.handleMinutesChange} className=\"Timespan\" />&nbsp;:&nbsp;\n        <input type=\"number\" placeholder=\"seconds\" value={this.props.goalSeconds} onChange={this.handleSecondsChange} className=\"Timespan\" />\n      </fieldset>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}